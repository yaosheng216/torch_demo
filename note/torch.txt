1.torch.autocast: PyTorch 中用于自动混合精度（Automatic Mixed Precision，AMP）训练的一个上下文管理器。
                  它的主要作用是帮助提高深度学习训练过程中的计算效率和速度，同时在减少显存使用的同时尽量不影响模型的精度
    主要功能和优势:
        自动选择使用 FP16（半精度浮点数）和 FP32（单精度浮点数）进行计算，以加速训练过程。
        通常，前向传播的某些操作可以用 FP16 进行，而损失计算和反向传播则使用 FP32，以保持数值稳定性。
    显存节省:
        使用 FP16 可以减少模型在 GPU 上所需的显存，这对于大型模型或大批量训练尤其有用。
    简化代码:
        使用 torch.autocast 可以在代码中简单地通过添加上下文管理器来实现混合精度，而不需要手动管理数据类型转换

2.torch.exp: PyTorch 中的一个函数，用于计算输入张量中每个元素的指数（即 e 的乘方）。
             具体来说，给定一个张量 x，torch.exp(x) 会返回一个新的张量，其中每个元素是对应元素的 e^x

3.torch.cat: PyTorch 中的一个函数，用于将多个张量沿指定的维度进行拼接。这个函数对于合并数据、调整张量形状等操作非常有用

4.torch.nn.functional.scaled_dot_product_attention: PyTorch 中用于计算缩放点积注意力（Scaled Dot-Product Attention）的函数，
            这个函数在自注意力机制（Self-Attention）中尤其重要，广泛应用于 Transformer 模型

            1.计算注意力分数: 首先，它接受查询（queries）、键（keys）和值（values）作为输入，并计算注意力分数。
                           这是通过计算查询与键之间的点积来实现的
            2.缩放因子: 为了防止点积值过大导致的梯度消失，计算的点积结果会根据键的维度进行缩放。通常，缩放因子是键的维度的平方根
            3.应用 softmax: 接下来，将缩放后的注意力分数通过 softmax 函数进行归一化，以获得每个键的权重。这样可以得到这些键在给定查询下的重要性
            4.加权求和: 最后，用这些权重对值进行加权求和，以得到最终的注意力输出

5.torch.nan_to_num: PyTorch 中的一个函数，用于将张量中的 NaN（Not a Number）值、正无穷大和负无穷大替换为指定的数值。
                    这个函数对于处理数据中的不合理值非常有用，可以确保计算过程的稳定性和准确性

6.einops 是一个用于张量操作的库，rearrange 是其中一个函数，用于重新排列和重塑张量的维度。通过使用 rearrange，用户可以以一种非常直观的方式
         改变数据的形状，而无需显式地调用 reshape、transpose 或其他类似操作

7.torch.arange: 用于生成一个一维的张量，其元素为指定范围内的数字。它类似于 NumPy 中的 numpy.arange 函数

8.torch.einsum: PyTorch 中一个非常强大的函数，它用于进行爱因斯坦求和约定的张量运算。这个函数允许你用简洁的语法表达复杂的张量操作，
                如内积、外积、矩阵乘法、转置等

9.torch.stack: PyTorch 中一个用于将多个 tensor 沿新维度进行拼接的函数。它通常用于在需要将多个相同形状的张量组合成一个更高维度的张量时

10.nn.Parameter: PyTorch 中的一个类，用于定义模型中需要学习的参数。它的主要作用是将一个张量（tensor）标记为模型的可训练参数，
                 从而在优化算法（如梯度下降）中被自动更新

11.torch.clamp: PyTorch 中的一个函数，用于将输入张量的值限制在指定的范围内。具体来说，它会将小于指定下限的值设置为下限，
                而将大于指定上限的值设置为上限

12.torch.no_grad: PyTorch 中的一个上下文管理器和装饰器，用于在推理阶段关闭自动梯度计算

13.torch.randn: 用于生成具有标准正态分布的随机数。标准正态分布意味着这些随机数的均值为 0，标准差为 1

14.torch.linspace: 用于生成在指定区间内等间隔的数值序列。它返回一个一维张量，包含指定数量的元素，从起始值 (start) 到结束值 (end)（包括这两个端点）
